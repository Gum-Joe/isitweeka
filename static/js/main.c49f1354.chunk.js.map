{"version":3,"sources":["gAnalytics.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GA_DISABLE_COOKIE_STR","gaSetState","state","document","cookie","window","API_KEY","App","props","gapiReady","isNotWeekAB","week","apiHasRan","isWeekend","this","loadGoogleAPI","script","createElement","src","async","defer","onload","gapi","load","client","setApiKey","setState","getCalendar","err","console","error","message","body","appendChild","d","dhere","Date","day","getDay","diff","getDate","setDate","inputDate","weekStart","getMonday","setUTCHours","weekEnd","dayNow","startTime","toISOString","endTime","calendarId","userTimeZone","init","calendar","events","list","timeMax","response","result","items","eventsToday","filter","entry","summary","length","theEvent","href","className","getStatus","Navbar","fixed","enableDeclineButton","declineButtonText","onAccept","location","reload","onDecline","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c49f1354.chunk.js","sourcesContent":["// Set to the same value as the web property used on the site\nexport const GA_PROPERTY = 'G-X4VMSWGN74';\n\n// Disable tracking if the opt-out cookie exists.\nexport const GA_DISABLE_COOKIE_STR = 'ga-disable-' + GA_PROPERTY;\n/*if (document.cookie.indexOf(disableStr + '=true') > -1) {\n\t// @ts-ignore\n\twindow[disableStr] = true;\n}*/\n\n// Opt-out function\n/** Use true to opt out */\nexport default function gaSetState(state: boolean): void {\n\tdocument.cookie = GA_DISABLE_COOKIE_STR + `=${state ? \"true\" : \"false\"}; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/`;\n\t// @ts-ignore\n\twindow[GA_DISABLE_COOKIE_STR] = state;\n}","import React, { Component } from 'react';\nimport gaSetState, { GA_DISABLE_COOKIE_STR, GA_PROPERTY } from \"./gAnalytics\";\nimport './App.css';\nimport CookieConsent from 'react-cookie-consent';\nimport { Navbar } from \"react-bootstrap\";\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\n/**\n * YES I KNOW THIS IS A BAD IDEA!!!!!!\n * But it's more convient \n * And i've limited it's use\n * And it's only for access to a public read-only\n */\nconst API_KEY = 'AIzaSyBJtspfBiYYXzpF3Nc32owjtjnJbRToxK4';\n\ninterface TheState {\n  /** Used to see whether the API has been loaded */\n  gapiReady: boolean;\n  /** Set to true if neither Week A or B is detected */\n  isNotWeekAB: boolean;\n  week: \"A\" | \"B\" | \"unknown\";\n  /** Tells page when API has ran  (i.e. page loaded) */\n  apiHasRan: boolean;\n  isWeekend: boolean;\n}\n\nclass App extends Component<{}, TheState> {\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      gapiReady: false,\n      isNotWeekAB: false,\n      week: \"unknown\",\n      apiHasRan : false,\n      isWeekend: false,\n    }\n  }\n\n  componentDidMount() {\n    this.loadGoogleAPI();\n  }\n\n  /**\n   * Loads the Google API, then runs {@link getCalendar}\n   */\n  loadGoogleAPI() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/client.js\";\n    script.async = true;\n    script.defer = true;\n\n    script.onload = () => {\n      window.gapi.load(\"client\", () => {\n        window.gapi.client.setApiKey(API_KEY);\n        window.gapi.client.load(\"calendar\", \"v3\", () => {\n          this.setState({ gapiReady: true });\n          try {\n            this.getCalendar();\n          } catch (err) {\n            console.error(\"Error: \" + err?.message)\n          }\n        });\n      });\n    };\n\n    document.body.appendChild(script);\n  }\n\n  /**\n   * Gets the monday from a week\n   * From https://stackoverflow.com/questions/4156434/javascript-get-the-first-day-of-the-week-from-current-date\n   */\n  getMonday(d: Date) {\n    const dhere = new Date(d);\n    const day = dhere.getDay();\n    // Sunday is day 0\n    // Sat is Day 6\n    // If Sun or Sat go to next week\n    /**\n     * What this does is:\n     * - Take the current date\n     * - Subtract the day of the week, taking us to the previous Sunday\n     * - Go forward one to monday\n     * - BUT if the current date is a Saturday, add 8 instead as we want 2 days after that Saturday (the next week), not the previous Monday\n     */\n    const diff = dhere.getDate() - day + (day === 6 ? 8 : 1); // adjust when day is saturday -> add 6 to bring us back to Saturday, then add 2 to go to Monday\n    return new Date(dhere.setDate(diff));\n  }\n\n  /**\n   * Loads the KECHB calendar, finds the current week, then goes to the Monday of that week and checks for a Week A or Week B event.\n   */\n  async getCalendar() {\n\n    const inputDate = new Date();\n    // Used for fiddling:\n    // inputDate.setDate(2);\n    // inputDate.setMonth(0);\n    // inputDate.setFullYear(2021);\n    const weekStart = this.getMonday(inputDate);\n    weekStart.setUTCHours(0, 0, 0, 0); // Set to start of day\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 1)\n    weekEnd.setUTCHours(0, 0, 0, 0); // Set to start of day\n\n    // Tell us if weekend!\n    const dayNow = inputDate.getDay();\n    if (dayNow === 6 || dayNow === 0) { // 0 is Sunday, 6 is Saturday\n      this.setState({\n        isWeekend: true,\n      })\n    } \n\n\n    const startTime = weekStart.toISOString()\n    const endTime = weekEnd.toISOString();\n    \n    // The \"Calendar ID\" from your calendar settings page, \"Calendar Integration\" secion:\n    const calendarId = 'calendar@camphillboys.bham.sch.uk';\n\n    // 1. Create a project using google's wizzard: https://console.developers.google.com/start/api?id=calendar\n    // 2. Create credentials:\n    //    a) Go to https://console.cloud.google.com/apis/credentials\n    //    b) Create Credentials / API key\n    //    c) Since your key will be called from any of your users' browsers, set \"Application restrictions\" to \"None\",\n    //       leave \"Website restrictions\" blank; you may optionally set \"API restrictions\" to \"Google Calendar API\"\n    \n    // You can get a list of time zones from here: http://www.timezoneconverter.com/cgi-bin/zonehelp\n    const userTimeZone = \"Europe/London\";\n\n    // Initializes the client with the API key and the Translate API.\n    await window.gapi.client.init({\n      'apiKey': API_KEY,\n      // Discovery docs docs: https://developers.google.com/api-client-library/javascript/features/discovery\n      'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'],\n    })\n    const response = await gapi.client.calendar.events.list({\n      'calendarId': calendarId,\n      'timeZone': userTimeZone,\n      'singleEvents': true,\n      'timeMin': (new Date(startTime)).toISOString(),\n      timeMax: (new Date(endTime)).toISOString(),\n      'maxResults': 20,\n      'orderBy': 'startTime'\n    });\n    if (response.result.items) {\n      const calendarRows = ['<table class=\"wellness-calendar\"><tbody>'];\n      // Filter events to those that are \"Week A\" or \"Week B\"\n      const eventsToday = response.result.items.filter(entry => entry.summary === \"Week A\" || entry.summary === \"Week B\");\n      if (eventsToday.length === 0) {\n        // Neithe detected.  Probably Hols.\n        this.setState({\n          isNotWeekAB: true,\n          week: \"unknown\",\n          apiHasRan: true,\n        })\n      } else {\n        const theEvent = eventsToday[0];\n        switch (theEvent.summary) {\n          case \"Week A\":\n            this.setState({\n              week: \"A\",\n              apiHasRan: true,\n            });\n            break;\n          case \"Week B\":\n            this.setState({\n              week: \"B\",\n              apiHasRan: true,\n            });\n            break;\n          default:\n            // NEITHER!\n            // Something went wrong\n            this.setState({\n              isNotWeekAB: true,\n              apiHasRan: true,\n            })\n            break;\n        }\n      }\n    }\n  }\n\n  getStatus() {\n    if (this.state.isNotWeekAB || this.state.week === \"unknown\") {\n      return (\n        <>\n          <h2>It is neither Week A or B.</h2>\n          <h3>This means it's probably a holiday.</h3>\n          <h4>If you believe this is in error, please email <a href=\"mailto:info@isitweeka.com\">info@isitweeka.com</a></h4>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <h2>{this.state.isWeekend ? \"Next week will be\" : \"It is\"}</h2> {/* Special case for weekend, where we show next week*/}\n          <h1>Week {this.state.week}</h1>\n          <h4>More coming soon...</h4>\n        </>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"isitweeka\">\n          {\n            this.state.apiHasRan ? this.getStatus() : ( <h2>Loading...</h2> )\n          }\n          {/*<h2>It is</h2>\n          <h1>Week A/B</h1>\n          <h3>More coming soon</h3>\n          <h2>isitweeka.com</h2>\n          <h1>IT BEGINS.</h1>\n          <h3>More coming soon</h3>*/}\n        </div>\n\n        {/* Cookie consent */}\n        <Navbar fixed=\"bottom\">\n          <CookieConsent\n            enableDeclineButton\n            declineButtonText=\"No thanks\"\n            onAccept={\n              () => { gaSetState(false); window.location.reload(); }\n            }\n            onDecline={\n              () => { gaSetState(true); window.location.reload(); }\n            }\n          >\n            This website uses cookies (via Google Analytics) for analytics.\n            <a href={process.env.PUBLIC_URL + \"/privacy.html\"}>View Privacy Policy</a>\n          </CookieConsent>\n        </Navbar>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}